"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.resolveTargets = exports.resolveBrowserslistConfigFile = void 0;
// Kind of gross, but essentially asserting that the exports of this module are the same as the
// exports of index-browser, since this file may be replaced at bundle time with index-browser.
({});
var path_1 = require("path");
var helper_compilation_targets_1 = require("@babel/helper-compilation-targets");
function resolveBrowserslistConfigFile(browserslistConfigFile, configFileDir) {
    return path_1["default"].resolve(configFileDir, browserslistConfigFile);
}
exports.resolveBrowserslistConfigFile = resolveBrowserslistConfigFile;
function resolveTargets(options, root) {
    // todo(flow->ts) remove any and refactor to not assign different types into same variable
    var targets = options.targets;
    if (typeof targets === "string" || Array.isArray(targets)) {
        targets = { browsers: targets };
    }
    if (targets && targets.esmodules) {
        targets = __assign(__assign({}, targets), { esmodules: "intersect" });
    }
    var browserslistConfigFile = options.browserslistConfigFile;
    var configFile;
    var ignoreBrowserslistConfig = false;
    if (typeof browserslistConfigFile === "string") {
        configFile = browserslistConfigFile;
    }
    else {
        ignoreBrowserslistConfig = browserslistConfigFile === false;
    }
    return helper_compilation_targets_1["default"](targets, {
        ignoreBrowserslistConfig: ignoreBrowserslistConfig,
        configFile: configFile,
        configPath: root,
        browserslistEnv: options.browserslistEnv
    });
}
exports.resolveTargets = resolveTargets;
